{
  "resourceType": "Library",
  "meta": {
    "profile": [
      "http://hl7.eu/fhir/ig/gravitate-health/StructureDefinition/lens"
    ]
  },
  "extension": [
    {
      "url": "http://hl7.eu/fhir/ig/gravitate-health/StructureDefinition/lee-version",
      "valueString": "dev"
    }
  ],
  "url": "http://hl7.eu/fhir/ig/gravitate-health/Library/mock-lib",
  "identifier": [
    {
      "system": "http://gravitate-health.lst.tfo.upm.es",
      "value": "rmm-lens"
    }
  ],
  "version": "0.0.1",
  "name": "rmm-lens",
  "date": "2024-07-30T10:17:53.758Z",
  "title": "rmm-lens",
  "status": "draft",
  "experimental": true,
  "type": {
    "coding": [
      {
        "code": "logical-library"
      }
    ]
  },
  "publisher": "Gravitate Health Project - UPM Team",
  "contact": [
    {
      "name": "Gravitate Health",
      "telecom": [
        {
          "system": "url",
          "value": "https://www.gravitatehealth.eu/"
        }
      ]
    }
  ],
  "description": "Lens that aplies RMM to a leaflet",
  "jurisdiction": [
    {
      "coding": [
        {
          "code": "US",
          "system": "urn:iso:std:iso:3166"
        }
      ]
    }
  ],
  "purpose": "Match the RMM of an ePI to a leaflet",
  "usage": "Apply this lens into a leaflet to search for its RMM",
  "copyright": "Â© 2024 Gravitate Health",
  "parameter": [
    {
      "use": "in",
      "documentation": "parameter if it exists",
      "type": "CodeableConcept"
    }
  ],
  "content": [
    {
      "contentType": "application/javascript",
      "data": ""
    }
  ]
}